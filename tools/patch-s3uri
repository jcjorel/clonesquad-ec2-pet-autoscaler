#!/usr/bin/python3
#
import os
from os.path import dirname, abspath, join
import sys

# Find code directory relative to our directory
THIS_DIR = dirname(__file__)
CODE_DIR = abspath(join(THIS_DIR, '..', 'src'))
sys.path.append(CODE_DIR)
CLONESQUAD_DEPENDENCY_DIR = abspath(os.getenv("CLONESQUAD_DEPENDENCY_DIR"))
sys.path.append(CLONESQUAD_DEPENDENCY_DIR)

import pdb
import misc
import argparse
import debug as Dbg

import yaml
import re

import logging
from logging import handlers
LOG_LEVEL = logging.INFO
logger = logging.getLogger(sys.argv[0])
logger.setLevel(LOG_LEVEL)

parser = argparse.ArgumentParser(description="CloudFormation template patch tool (S3 absolute references to Parameters)")
parser.add_argument('template_file', help="CloudFormation template file to patch", type=str, nargs=1)
parser.add_argument('--version', help="CloneSquad version", type=str, default="")
parser.add_argument('--s3-bucket', help="Target S3 Bucket name", type=str, default="")
parser.add_argument('--s3-prefix', help="Target S3 Prefix name", type=str, default="")
parser.add_argument('--obfuscate', help="Target S3 Prefix name", type=bool, default=False)

args = parser.parse_args()

def select_customization_parameter(index, default):
    split_parameter = { "Fn::Split" : [
            ":",
            {"Ref": "CustomizationZipParameters"}
        ]}
    select_parameter = { "Fn::Select" : [
            str(index),
            split_parameter
            ]}
    return { "Fn::If" : [
            "HasCustomizationZipParameters",
            select_parameter,
            default
            ]}

with open(args.template_file[0]) as f:
    content = yaml.load(f, Loader=yaml.FullLoader)
    content["Description"] += " %s" % args.version

    for r in content["Resources"]:
        res = content["Resources"][r]
        properties = res["Properties"]

        for pr in ["ContentUri", "CodeUri"]:
            if pr in properties: 
                prop = properties[pr]
                m = re.search("^s3://([-.\w]+)/(.*)/(\w+)", prop)
                if len(m.groups()) != 3:
                   raise Exception("Can't parse property %s/%s !" % (pr, prop))
                bucket, prefix, key = [m.group(1), m.group(2), m.group(3)]

                prefix_and_key = "%s/%s" % (args.s3_prefix if not args.obfuscate else "YYYYYYYYYYYYYY", key)
                properties[pr] = "s3://%s/%s" % (args.s3_bucket if not args.obfuscate else "XXXXXXXXXXXXXX", prefix_and_key)

                if not args.obfuscate and r == "MainFunction":
                    properties[pr] = {
                            "Bucket": select_customization_parameter(0, args.s3_bucket),
                            "Key": select_customization_parameter(1, prefix_and_key)
                        }

        # Patch custom resource with version to force CloudFormation update
        if "CloneSquadVersion" in properties:
            properties["CloneSquadVersion"] = args.version

        # Patch Lambda Environment variable with version
        if "Environment" in properties and "Variables" in properties["Environment"]:
            envs = properties["Environment"]["Variables"]
            if "CloneSquadVersion" in envs:
                envs["CloneSquadVersion"] = args.version

print(yaml.dump(content))
